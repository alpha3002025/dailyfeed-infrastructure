apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: infra
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        app.kubernetes.io/instance: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "root"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "hitEnter###"
        - name: MONGO_INITDB_DATABASE
          value: "dailyfeed"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: mongodb-data
        emptyDir: {}
      - name: mongodb-init
        configMap:
          name: mongodb-init-script
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  namespace: infra
data:
  init.js: |
    db = db.getSiblingDB('dailyfeed');
    db.createUser({
      user: 'dailyfeed',
      pwd: 'hitEnter###',
      roles: [
        { role: 'readWrite', db: 'dailyfeed' },
        { role: 'dbAdmin', db: 'dailyfeed' }
      ]
    });
    db.createUser({
      user: 'dailyfeed-search',
      pwd: 'hitEnter###',
      roles: [
        { role: 'readWrite', db: 'dailyfeed' },
        { role: 'dbAdmin', db: 'dailyfeed' }
      ]
    });
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: infra
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mongodb
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb